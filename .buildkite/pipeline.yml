x-common-params:
  - &gb-mobile-docker-container
    docker#v3.8.0:
      image: "public.ecr.aws/automattic/gb-mobile-image:latest"
      environment:
        - "CI=true"
        # Allow WP-CLI to be run as root, otherwise it throws an exception.
        # Reference: https://git.io/J9q2S
        - "WP_CLI_ALLOW_ROOT=true"
  - &publish-android-artifacts-docker-container
    docker#v3.8.0:
      image: "public.ecr.aws/automattic/android-build-image:v1.1.0"
      propagate-environment: true
      environment:
        # DO NOT MANUALLY SET THESE VALUES!
        # They are passed from the Buildkite agent to the Docker container
        - "AWS_ACCESS_KEY"
        - "AWS_SECRET_KEY"

steps:
  - block: "Request trigger Android bundle and builds"
    branches: "dependabot/submodules/*"

  - label: Build npm cache
    key: build-npm
    plugins:
      - *gb-mobile-docker-container
      - automattic/git-shallow-clone
    command: |
      source /root/.bashrc

      echo "--- :node: Setup Node environment"
      nvm install && nvm use

      # Note that `npm ci` deletes node_modules and installs from scratch, for a deterministic CI build.
      # For that reason, we don't attempt to download them but start from scratch.
      #
      # It's possible we could refine our approach and maybe check the various lockfiles to determine whether there are valid caches that we could download.
      echo "--- :npm: Build global dependencies cache"
      npm ci --unsafe-perm --no-audit --no-progress

      echo "--- :mag: What's going on inside Jetpack?"
      set -x
      ls -l jetpack/node_modules
      ls -l jetpack/node_modules/.pnpm
      set +x

      node .buildkite/upload-caches.js

  - label: Lint
    depends_on: build-npm
    key: lint
    plugins:
      - *gb-mobile-docker-container
      - automattic/git-shallow-clone
    command: |
      echo "--- :bug: Check npm artifacts (fresh clone)"
      set -x
      ls -a /root
      ls -a /root/.npm
      [[ -d node_modules ]] && ls node_modules || echo "--- :skull_and_crossbones: node_modules not present"
      [[ -d gutenberg/node_modules ]] && ls gutenberg/node_modules || echo "--- :skull_and_crossbones: gutenberg/node_modules not present"
      [[ -d gutenberg/packages/components/node_modules ]] && ls gutenberg/packages/components/node_modules || echo "--- :skull_and_crossbones: gutenberg/packages/components/node_modules not present"
      [[ -d jetpack/node_modules ]] && ls jetpack/node_modules || echo "--- :skull_and_crossbones: jetpack/node_modules not present"
      [[ -d src/i18n-cache ]] && ls src/i18n-cache || echo "--- :skull_and_crossbones: src/i18n-cache not present"
      # On a macOS machine, this would be ~/Library/pnpm/store/v3
      [[ -d /root/.local/share/pnpm/store/v3 ]] && ls /root/.local/share/pnpm/store/v3 || echo "--- :skull_and_crossbones: /root/.local/share/pnpm/store/v3"
      set +x

      source /root/.bashrc

      echo "--- :node: Setup Node environment"
      nvm install && nvm use

      node .buildkite/download-caches.js

      echo "--- :bug: Check npm artifacts (after downloading caches)"
      set -x
      ls -a /root
      ls -a /root/.npm
      [[ -d node_modules ]] && ls node_modules || echo "--- :skull_and_crossbones: node_modules not present"
      [[ -d jetpack/node_modules ]] && ls jetpack/node_modules || echo "--- :skull_and_crossbones: jetpack/node_modules not present"
      [[ -d gutenberg/node_modules ]] && ls gutenberg/node_modules || echo "--- :skull_and_crossbones: gutenberg/node_modules not present"
      [[ -d gutenberg/packages/components/node_modules ]] && ls gutenberg/packages/components/node_modules || echo "--- :skull_and_crossbones: gutenberg/packages/components/node_modules not present"
      [[ -d src/i18n-cache ]] && ls src/i18n-cache || echo "--- :skull_and_crossbones: src/i18n-cache not present"
      # On a macOS machine, this would be ~/Library/pnpm/store/v3
      [[ -d /root/.local/share/pnpm/store/v3 ]] && ls /root/.local/share/pnpm/store/v3 || echo "--- :skull_and_crossbones: /root/.local/share/pnpm/store/v3"
      set +x

      echo "--- :bug: Check npm artifacts (after npm install)"
      set -x
      ls -a /root
      ls -a /root/.npm
      [[ -d node_modules ]] && ls node_modules || echo "--- :skull_and_crossbones: node_modules not present"
      [[ -d jetpack/node_modules ]] && ls jetpack/node_modules || echo "--- :skull_and_crossbones: jetpack/node_modules not present"
      [[ -d gutenberg/node_modules ]] && ls gutenberg/node_modules || echo "--- :skull_and_crossbones: gutenberg/node_modules not present"
      [[ -d gutenberg/packages/components/node_modules ]] && ls gutenberg/packages/components/node_modules || echo "--- :skull_and_crossbones: gutenberg/packages/components/node_modules not present"
      [[ -d src/i18n-cache ]] && ls src/i18n-cache || echo "--- :skull_and_crossbones: src/i18n-cache not present"
      # On a macOS machine, this would be ~/Library/pnpm/store/v3
      [[ -d /root/.local/share/pnpm/store/v3 ]] && ls /root/.local/share/pnpm/store/v3 || echo "--- :skull_and_crossbones: /root/.local/share/pnpm/store/v3"
      set +x

      echo "--- :node: Lint"
      CHECK_TESTS=false CHECK_CORRECTNESS=true ./bin/ci-checks-js.sh

  - label: Android Unit Tests
    depends_on: build-npm
    key: unit-tests-android
    plugins:
      - *gb-mobile-docker-container
      - automattic/git-shallow-clone
    command: |
      source /root/.bashrc

      echo "--- :node: Setup Node environment"
      nvm install && nvm use

      node .buildkite/download-caches.js

      echo "--- :mag: What's going on inside Jetpack?"
      set -x
      ls -l jetpack/node_modules
      ls -l jetpack/node_modules/.pnpm
      set +x

      echo "--- :pnpm: :jetpack: Setup pnpm symlinks - (SKIPPED AS A TEST)"
      ./bin/run-jetpack-command.sh "install --ignore-scripts"

      echo "--- :globe_with_meridians: Propagate i18n from local cache to submodules"
      ./bin/i18n-check-cache.sh

      echo "--- :node: Unit Tests"
      TEST_RN_PLATFORM=android CHECK_TESTS=true CHECK_CORRECTNESS=false ./bin/ci-checks-js.sh
    artifact_paths:
      - ./*-tests-out.log

  - label: iOS Unit Tests
    depends_on: build-npm
    key: unit-tests-ios
    plugins:
      - *gb-mobile-docker-container
      - automattic/git-shallow-clone
    command: |
      source /root/.bashrc

      echo "--- :node: Setup Node environment"
      nvm install && nvm use

      node .buildkite/download-caches.js

      echo "--- :pnpm: :jetpack: Setup pnpm symlinks"
      ./bin/run-jetpack-command.sh "install --ignore-scripts"

      echo "--- :globe_with_meridians: Propagate i18n from local cache to submodules"
      ./bin/i18n-check-cache.sh

      echo "--- :node: Unit Tests"
      TEST_RN_PLATFORM=ios CHECK_TESTS=true CHECK_CORRECTNESS=false ./bin/ci-checks-js.sh
    artifact_paths:
      - ./*-tests-out.log

  - label: "Build JS Bundles"
    depends_on:
      - build-npm
      # Don't wait for tests while testing the setup
      # - "unit-tests-android"
      # - "unit-tests-ios"
    key: "js-bundles"
    plugins:
      - *gb-mobile-docker-container
      - automattic/git-shallow-clone
    command: |
        source /root/.bashrc

        echo "--- :node: Setup Node environment"
        nvm install && nvm use

        node .buildkite/download-caches.js

        echo "--- :pnpm: :jetpack: Setup pnpm symlinks"
        ./bin/run-jetpack-command.sh "install --ignore-scripts"

        echo "--- :package: Run bundle prep work"
        npm run prebundle:js

        echo "--- :android: Build Android bundle"
        npm run bundle:android

        echo "--- :arrow_up: Upload Android bundle artifact"
        buildkite-agent artifact upload bundle/android/App.js

        echo "--- :ios: Build iOS bundle"
        npm run bundle:ios

        echo "--- :arrow_up: Upload iOS bundle artifact"
        buildkite-agent artifact upload bundle/ios/App.js

  - label: "Build Android RN Aztec & Publish to S3"
    depends_on: "unit-tests-android"
    key: "publish-react-native-aztec-android"
    plugins:
      - *publish-android-artifacts-docker-container
      - automattic/git-shallow-clone
    command: |
        .buildkite/publish-react-native-aztec-android-artifacts.sh

  - label: "Build Android RN Bridge & Publish to S3"
    depends_on:
      - "js-bundles"
      - "publish-react-native-aztec-android"
    plugins:
      - automattic/git-shallow-clone
      - *publish-android-artifacts-docker-container
    command: |
        .buildkite/publish-react-native-bridge-android-artifacts.sh

  - label: Build iOS RN XCFramework & Publish to S3
    depends_on: js-bundles
    command: .buildkite/publish-react-native-ios-artifacts.sh
    artifact_paths:
      - ios-xcframework/build/xcframeworks/*.tar.gz
    plugins:
      - automattic/a8c-ci-toolkit#2.17.0
      - automattic/git-shallow-clone
     gents:
      queue: mac
    env:
      IMAGE_ID: xcode-14.3
