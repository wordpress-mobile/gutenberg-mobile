x-common-params:
  - &gb-mobile-docker-container
    docker#v3.8.0:
      image: "public.ecr.aws/automattic/gb-mobile-image:latest"
      environment:
        - "CI=true"
        # Allow WP-CLI to be run as root, otherwise it throws an exception.
        # Reference: https://git.io/J9q2S
        - "WP_CLI_ALLOW_ROOT=true"
  - &publish-android-artifacts-docker-container
    docker#v3.8.0:
      image: "public.ecr.aws/automattic/android-build-image:v1.1.0"
      propagate-environment: true
      environment:
        # DO NOT MANUALLY SET THESE VALUES!
        # They are passed from the Buildkite agent to the Docker container
        - "AWS_ACCESS_KEY"
        - "AWS_SECRET_KEY"

steps:
  - block: "Request trigger Android bundle and builds"
    branches: "dependabot/submodules/*"

  - label: Build npm cache
    key: build-npm
    plugins:
      - *gb-mobile-docker-container
      - automattic/git-shallow-clone
    command: |
      source /root/.bashrc

      echo "--- :node: Setup Node environment"
      nvm install && nvm use

      # Note that `npm ci` deletes node_modules and installs from scratch, for a deterministic CI build.
      # For that reason, we don't attempt to download them but start from scratch.
      #
      # It's possible we could refine our approach and maybe check the various lockfiles to determine whether there are valid caches that we could download.
      echo "--- :npm: Build global dependencies cache"
      npm ci --unsafe-perm --no-audit --no-progress

      node .buildkite/upload-caches.js

  # - label: Lint
  #   depends_on: build-npm
  #   key: lint
  #   plugins:
  #     - *gb-mobile-docker-container
  #     - automattic/git-shallow-clone
  #   command: |
  #     source /root/.bashrc

  #     echo "--- :node: Setup Node environment"
  #     nvm install && nvm use

  #     node .buildkite/download-caches.js

  #     echo "--- :node: Lint"
  #     CHECK_TESTS=false CHECK_CORRECTNESS=true ./bin/ci-checks-js.sh

  # - label: Android Unit Tests
  #   depends_on: build-npm
  #   key: unit-tests-android
  #   plugins:
  #     - *gb-mobile-docker-container
  #     - automattic/git-shallow-clone
  #   command: |
  #     source /root/.bashrc

  #     echo "--- :node: Setup Node environment"
  #     nvm install && nvm use

  #     node .buildkite/download-caches.js

  #     echo "--- :node: Unit Tests"
  #     TEST_RN_PLATFORM=android CHECK_TESTS=true CHECK_CORRECTNESS=false ./bin/ci-checks-js.sh
  #   artifact_paths:
  #     - ./*-tests-out.log

  # - label: iOS Unit Tests
  #   depends_on: build-npm
  #   key: unit-tests-ios
  #   plugins:
  #     - *gb-mobile-docker-container
  #     - automattic/git-shallow-clone
  #   command: |
  #     source /root/.bashrc

  #     echo "--- :node: Setup Node environment"
  #     nvm install && nvm use

  #     node .buildkite/download-caches.js

  #     echo "--- :node: Unit Tests"
  #     TEST_RN_PLATFORM=ios CHECK_TESTS=true CHECK_CORRECTNESS=false ./bin/ci-checks-js.sh
  #   artifact_paths:
  #     - ./*-tests-out.log

  # - label: "Build JS Bundles"
  #   depends_on:
  #     - build-npm
  #     # Don't wait for tests while testing the setup
  #     # - "unit-tests-android"
  #     # - "unit-tests-ios"
  #   key: "js-bundles"
  #   plugins:
  #     - *gb-mobile-docker-container
  #     - automattic/git-shallow-clone
  #   command: |
  #       source /root/.bashrc

  #       echo "--- :node: Setup Node environment"
  #       nvm install && nvm use

  #       node .buildkite/download-caches.js

  #       echo "--- :package: Run bundle prep work"
  #       npm run prebundle:js

  #       echo "--- :android: Build Android bundle"
  #       npm run bundle:android

  #       echo "--- :arrow_up: Upload Android bundle artifact"
  #       buildkite-agent artifact upload bundle/android/App.js

  #       echo "--- :ios: Build iOS bundle"
  #       npm run bundle:ios

  #       echo "--- :arrow_up: Upload iOS bundle artifact"
  #       buildkite-agent artifact upload bundle/ios/App.js

  # - label: "Build Android RN Aztec & Publish to S3"
  #   depends_on: "unit-tests-android"
  #   key: "publish-react-native-aztec-android"
  #   plugins:
  #     - *publish-android-artifacts-docker-container
  #     - automattic/git-shallow-clone
  #   command: |
  #       .buildkite/publish-react-native-aztec-android-artifacts.sh

  # - label: "Build Android RN Bridge & Publish to S3"
  #   depends_on:
  #     - "js-bundles"
  #     - "publish-react-native-aztec-android"
  #   plugins:
  #     - automattic/git-shallow-clone
  #     - *publish-android-artifacts-docker-container
  #   command: |
  #       .buildkite/publish-react-native-bridge-android-artifacts.sh

  # - label: Build iOS RN XCFramework & Publish to S3
  #   depends_on: js-bundles
  #   command: .buildkite/publish-react-native-ios-artifacts.sh
  #   artifact_paths:
  #     - ios-xcframework/build/xcframeworks/*.tar.gz
  #   plugins:
  #     - automattic/a8c-ci-toolkit#2.17.0
  #     - automattic/git-shallow-clone
  #    gents:
  #     queue: mac
  #   env:
  #     IMAGE_ID: xcode-14.3

  # TODO: Add a block step

  - label: Build and Test iOS .app
    depends_on:
      - build-npm
      # Don't wait for tests while testing the setup
      # - unit-tests-ios
    command: |
      echo "--- :node: Setup Node environment (brew install)"
      brew install nvm

      echo "--- :node: Setup Node environment (set NVM_DIR)"
      set -x
      mkdir -p "$$HOME/.nvm"
      export NVM_DIR="$$HOME/.nvm"
      set +x

      echo "+++ :bug: Echo NVM_DIR"
      echo $$NVM_DIR

      echo "--- :node: Setup Node environment (source nvm)"
      set -x
      [ -s "$$HOMEBREW_PREFIX/opt/nvm/nvm.sh" ] && \. "$$HOMEBREW_PREFIX/opt/nvm/nvm.sh"
      set +x

      echo "--- :node: Setup Node environment (nvm install)"
      nvm install && nvm use

      echo "+++ :bug: Expecting this to fail because the caches were made on Linux"
      node .buildkite/download-caches.js

      # TODO: We'll want to cache this somehow
      echo "--- :react: Build iOS bundle for testing"
      npm run test:e2e:bundle:ios

      echo "--- :react: Build iOS app for testing"
      npm run core test:e2e:build-app:ios

      echo "-- :saucelabs: Test on Saucelabs"
      echo "TODO"
    plugins:
      - automattic/a8c-ci-toolkit#2.17.0
      - automattic/git-shallow-clone
    agents:
      queue: mac
    env:
      IMAGE_ID: xcode-14.3
      TEST_RN_PLATFORM: ios
      TEST_ENV: sauce

  - label: Build and Test Android .apk
    depends_on:
      - build-npm
      # Don't wait for tests while testing the setup
      # - unit-tests-android
    command: |
      source /root/.bashrc

      echo "--- :node: Install NVM"
      curl https://raw.githubusercontent.com/creationix/nvm/master/install.sh | bash

      echo "--- :node: Setup Node environment"
      nvm install && nvm use

      node .buildkite/download-caches.js

      # TODO: We'll want to cache this somehow
      echo "--- :react: Build Android bundle for testing"
      npm run test:e2e:bundle:android

      echo "--- :react: Build Android app for testing"
      npm run core test:e2e:build-app:android

      echo "-- :saucelabs: Test on Saucelabs"
      echo "TODO"
    plugins:
      - *publish-android-artifacts-docker-container
      - automattic/git-shallow-clone
