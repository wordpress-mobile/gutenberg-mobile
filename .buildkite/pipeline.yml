x-common-params:
  - &gb-mobile-docker-container
    docker#v3.8.0:
      image: 'public.ecr.aws/automattic/gb-mobile-image:latest'
      environment:
        - 'CI=true'
        # Allow WP-CLI to be run as root, otherwise it throws an exception.
        # Reference: https://git.io/J9q2S
        - 'WP_CLI_ALLOW_ROOT=true'
  - &git-cache-plugin
    automattic/git-s3-cache#1.1.4:
      # Ensure these settings match what's defined in cache-builder.yml
      bucket: a8c-repo-mirrors
      repo: automattic/gutenberg-mobile/
  - &publish-android-artifacts-docker-container
    docker#v3.8.0:
      image: 'public.ecr.aws/automattic/android-build-image:v1.3.0'
      propagate-environment: true
      environment:
        # DO NOT MANUALLY SET THESE VALUES!
        # They are passed from the Buildkite agent to the Docker container
        - 'AWS_ACCESS_KEY'
        - 'AWS_SECRET_KEY'
  - &xcode_agent_env
    IMAGE_ID: xcode-14.3.1
  - &is_branch_for_full_ui_tests
    build.branch == 'trunk' || build.branch =~ /^release.*/ || build.branch =~ /^dependabot\/submodules.*/
  - &is_branch_for_quick_ui_tests
    build.branch != 'trunk' && build.branch !~ /^release.*/ && build.branch !~ /^dependabot\/submodules.*/

steps:
  - block: "Request trigger Android bundle and builds"
    branches: "dependabot/submodules/*"

  - label: Lint and Unit Tests
    key: unit-tests
    plugins:
      - *gb-mobile-docker-container
    command: |
      source /root/.bashrc

      echo "--- :node: Setup Node environment"
      nvm install && nvm use

      echo "--- :npm: Install Node dependencies"
      npm ci --unsafe-perm --prefer-offline --no-audit --no-progress

      echo "--- :node: Lint and Unit Tests"
      ./bin/ci-checks-js.sh
    env:
      JEST_JUNIT_OUTPUT_FILE: reports/test-results/android-test-results.xml
    artifact_paths:
      - ./logs/*.log
      - ./reports/test-results/*.xml
    notify:
      - github_commit_status:
          context: Lint and Unit Tests

  - label: "Build JS Bundles"
    depends_on: "unit-tests"
    key: "js-bundles"
    plugins:
      - *gb-mobile-docker-container
      - *git-cache-plugin
    command: |
        source /root/.bashrc

        echo "--- :node: Setup Node environment"
        nvm install && nvm use

        echo "--- :npm: Install Node dependencies"
        npm ci --unsafe-perm --prefer-offline --no-audit --no-progress

        if [[ -z "$BUILDKITE_TAG" ]]; then
          echo "--- :package: Skip bundle prep work"
        else
          echo "--- :package: Run bundle prep work"
          npm run prebundle:js
        fi

        echo "--- :android: Build Android bundle"
        npm run bundle:android

        echo "--- :arrow_up: Upload Android bundle artifact"
        buildkite-agent artifact upload bundle/android/App.js

        if [[ -n "$BUILDKITE_TAG" ]]; then
          echo "--- :arrow_up: Upload Android source map"
          node gutenberg/node_modules/react-native/scripts/compose-source-maps.js bundle/android/App.text.js.map bundle/android/App.js.map -o bundle/android/App.composed.js.map
          buildkite-agent artifact upload bundle/android/App.composed.js.map
        fi

        echo "--- :ios: Build iOS bundle"
        npm run bundle:ios

        echo "--- :arrow_up: Upload iOS bundle artifact"
        buildkite-agent artifact upload bundle/ios/App.js
        tar -czvf ios-assets.tar.gz -C ios-xcframework/Gutenberg/Resources assets/
        buildkite-agent artifact upload ios-assets.tar.gz

        if [[ -n "$BUILDKITE_TAG" ]]; then
          echo "--- :arrow_up: Upload iOS source map"
          node gutenberg/node_modules/react-native/scripts/compose-source-maps.js bundle/ios/App.text.js.map bundle/ios/App.js.map -o bundle/ios/App.composed.js.map
          buildkite-agent artifact upload bundle/ios/App.composed.js.map
        fi

  - label: "Build Android RN Aztec & Publish to S3"
    depends_on: unit-tests
    key: "publish-react-native-aztec-android"
    plugins:
      - *git-cache-plugin
      - *publish-android-artifacts-docker-container
    command: .buildkite/commands/publish-react-native-aztec-android-artifacts.sh

  - label: "Build Android RN Bridge & Publish to S3"
    depends_on:
      - "js-bundles"
      - "publish-react-native-aztec-android"
    plugins:
      - *git-cache-plugin
      - *publish-android-artifacts-docker-container
    command: .buildkite/commands/publish-react-native-bridge-android-artifacts.sh

  - label: Build iOS RN XCFramework & Publish to S3
    depends_on: js-bundles
    command: .buildkite/commands/publish-react-native-ios-artifacts.sh
    artifact_paths:
      - ios-xcframework/build/xcframeworks/*.tar.gz
    plugins:
      - automattic/a8c-ci-toolkit#2.18.2
      - *git-cache-plugin
    agents:
      queue: mac
    env:
      IMAGE_ID: xcode-14.3.1

  - label: iOS Build and SauceLabs
    key: ios-build-and-saucelabs
    command: .buildkite/commands/build-ios.sh
    plugins:
      - automattic/a8c-ci-toolkit#2.18.2
      - *git-cache-plugin
    artifact_paths:
      - ./gutenberg/packages/react-native-editor/ios/GutenbergDemo.app.zip
    agents:
      queue: mac
    env: *xcode_agent_env

  - label: Test iOS on Device – Canary Pages
    depends_on: ios-build-and-saucelabs
    command: .buildkite/commands/test-ios.sh --canary
    plugins:
      - automattic/a8c-ci-toolkit#2.18.2
      - *git-cache-plugin
    artifact_paths:
      - reports/test-results/ios-test-results.xml
    agents:
      queue: mac
    env: *xcode_agent_env
    notify:
      - github_commit_status:
          context: Test iOS on Device - Canaries

  - block: "Full UI Tests"
    # Show only in branches that run the quick UI tests suite, to optionally run the full suite
    if: *is_branch_for_quick_ui_tests
    key: run-full-ui-test
    prompt: "Run full UI tests suites?"
    depends_on: ios-build-and-saucelabs

  - label: Test iOS on Device – Full iPhone
    # The quick UI tests suite version depends on the block step being unblocked
    if: *is_branch_for_quick_ui_tests
    depends_on:
      - ios-build-and-saucelabs
      - run-full-ui-test
    command: .buildkite/commands/test-ios.sh
    plugins:
      - automattic/a8c-ci-toolkit#2.18.2
      - *git-cache-plugin
    artifact_paths:
      - reports/test-results/ios-test-results.xml
    agents:
      queue: mac
    env: *xcode_agent_env

  # Same step as above, but will always run in trunk, release/, and dependabot/submodules branches
  - label: Test iOS on Device – Full iPhone
    # The full UI tests suite version depends only on the ios-build step, meaning it has no manual step that triggers it
    if: *is_branch_for_full_ui_tests
    depends_on:
      - ios-build-and-saucelabs
    command: .buildkite/commands/test-ios.sh
    plugins:
      - automattic/a8c-ci-toolkit#2.18.2
      - *git-cache-plugin
    artifact_paths:
      - reports/test-results/ios-test-results.xml
    agents:
      queue: mac
    env: *xcode_agent_env

  - label: Test iOS on Device – Full iPad
    # The quick UI tests suite version depends on the block step being unblocked
    if: *is_branch_for_quick_ui_tests
    depends_on:
      - ios-build-and-saucelabs
      - run-full-ui-test
    command: .buildkite/commands/test-ios.sh --ipad
    plugins:
      - automattic/a8c-ci-toolkit#2.18.2
      - *git-cache-plugin
    artifact_paths:
      - reports/test-results/ios-test-results.xml
    agents:
      queue: mac
    env: *xcode_agent_env

  - label: Test iOS on Device – Full iPad
    # The full UI tests suite version depends only on the ios-build step, meaning it has no manual step that triggers it
    if: *is_branch_for_full_ui_tests
    depends_on:
      - ios-build-and-saucelabs
    command: .buildkite/commands/test-ios.sh --ipad
    plugins:
      - automattic/a8c-ci-toolkit#2.18.2
      - *git-cache-plugin
    artifact_paths:
      - reports/test-results/ios-test-results.xml
    agents:
      queue: mac
    env: *xcode_agent_env
