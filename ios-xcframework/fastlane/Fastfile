# frozen_string_literal: true

default_platform :ios

XCFRAMEWORK_PROJECT_ROOT_FOLDER = File.dirname(File.expand_path(__dir__))

before_all do
  # Ensure we use the latest version of the toolkit
  check_for_toolkit_updates unless is_ci || ENV['FASTLANE_SKIP_TOOLKIT_UPDATE_CHECK']
end

lane :upload_xcframework_to_s3 do |options|
  archive_type = 'tar.gz'
  xcframework_archive_path = File.join(XCFRAMEWORK_PROJECT_ROOT_FOLDER, "build/xcframeworks/Gutenberg.#{archive_type}")

  unless File.exist? xcframework_archive_path
    UI.user_error! "Could not find XCFramework archive to upload at #{xcframework_archive_path}"
  end

  name = options.fetch(:name, nil)

  if name.nil?
    name = "Gutenberg-#{last_git_commit[:commit_hash]}.#{archive_type}"
    UI.message "No name provided, will default to #{name}"
  end

  upload_to_a8c_s3(file: xcframework_archive_path, name_on_s3: name)
  upload_podspec_to_s3(id: last_git_commit[:commit_hash])

  next unless is_ci

  tag = ENV.fetch('BUILDKITE_TAG', nil)

  next if tag.nil? || tag.empty?

  upload_to_a8c_s3(file: xcframework_archive_path, name_on_s3: "Gutenberg-#{tag}.#{archive_type}")
end

# rubocop:disable Metrics/AbcSize
# rubocop:disable Metrics/MethodLength
def upload_podspec_to_s3(id:)
  ios_version = '13.0'
  swift_version = '5.0'
  gutenberg_package = JSON.parse(File.read(File.join(File.dirname(XCFRAMEWORK_PROJECT_ROOT_FOLDER), 'package.json')))
  version = gutenberg_package['version']
  # This ought to be read from package.json, but there isn't one at the moment.
  # license = GUTENBERG_PACKAGE['license']
  license = 'GPL'
  context = binding

  podspec_erb = ERB.new(File.read(File.join(XCFRAMEWORK_PROJECT_ROOT_FOLDER, 'podspec.erb')))

  Dir.mktmpdir do |tmp_dir|
    podspec_path = File.join(tmp_dir, 'podspec')
    File.open(podspec_path, 'w') do |file|
      file.write(podspec_erb.result(context))
    end

    upload_to_a8c_s3(file: podspec_path, name_on_s3: "Gutenberg-#{id}.podspec")
  end
end
# rubocop:enable Metrics/AbcSize
# rubocop:enable Metrics/MethodLength

def upload_to_a8c_s3(file:, name_on_s3:, prefix: 'gutenberg-mobile', skip_if_exists: false)
  upload_to_s3(
    bucket: 'a8c-apps-public-artifacts',
    key: "#{prefix}/#{name_on_s3}",
    file: file,
    auto_prefix: false,
    skip_if_exists: skip_if_exists
  )
end
