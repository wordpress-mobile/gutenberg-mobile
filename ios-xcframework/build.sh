#!/bin/bash -eu

set -o pipefail

# This wraps calling xcodebuild in a function that passes the output to
# the xcbeautify formatter, but only if available.
#
# Output formatting is handy, but we don't want it to block running this
# script.
function _xcodebuild {
    FORMATTER=xcbeautify

    if command -v $FORMATTER &> /dev/null; then
        xcodebuild "$@" | $FORMATTER
    else
      echo "$FORMATTER not found, you will see raw xcodebuild output"
        xcodebuild "$@"
    fi
}

DERIVED_DATA_PATH=./DerivedData
DESTINATION='generic/platform=iOS'

rm -rf $DERIVED_DATA_PATH
rm -rf build

MAIN_FRAMEWORK_NAME=Gutenberg
WORKSPACE="./XCFrameworkScaffold.xcworkspace"
SCHEME=$MAIN_FRAMEWORK_NAME

_xcodebuild clean build \
  -workspace $WORKSPACE \
  -scheme $SCHEME \
  -destination "$DESTINATION" \
  -derivedDataPath "$DERIVED_DATA_PATH"

# See https://hackernoon.com/cocoapod-as-xcframework-with-dependencies
# and https://github.com/traveloka/ios-rn-prebuilt

ARCHIVES_ROOT=archives
IOS_DEVICE_ARCHIVE_PATH="$ARCHIVES_ROOT/ios_devices.xcarchive"
IOS_SIMULATOR_ARCHIVE_PATH="$ARCHIVES_ROOT/ios_simulators.xcarchive"

FINAL_OUTPUT="$MAIN_FRAMEWORK_NAME.xcframework"

rm -rf "$ARCHIVES_ROOT"
rm -rf "$FINAL_OUTPUT"

# 1. Archive for iOS
_xcodebuild archive \
  -workspace "$WORKSPACE" \
  -scheme "$SCHEME" \
  -configuration Release \
  -sdk iphoneos \
  -archivePath "$IOS_DEVICE_ARCHIVE_PATH" \
  -derivedDataPath "$DERIVED_DATA_PATH" \
  BUILD_LIBRARY_FOR_DISTRIBUTION=YES \
  SKIP_INSTALL=NO

# 2. Archive for Simulator
_xcodebuild archive \
  -workspace "$WORKSPACE" \
  -scheme "$SCHEME" \
  -configuration Debug \
  -sdk iphonesimulator \
  -archivePath "$IOS_SIMULATOR_ARCHIVE_PATH" \
  -derivedDataPath "$DERIVED_DATA_PATH" \
  BUILD_LIBRARY_FOR_DISTRIBUTION=YES \
  SKIP_INSTALL=NO

# Create XCFrameworks for every framework in the archives
XCFRAMEWORKS_DIR=xcframeworks

rm -rf $XCFRAMEWORKS_DIR
mkdir -p $XCFRAMEWORKS_DIR

for FRAMEWORK in $(find $IOS_DEVICE_ARCHIVE_PATH/Products/Library/Frameworks -type d -name "*.framework");
do
  CURRENT_FRAMEWORK_NAME=$(basename "$FRAMEWORK" .framework)

  # TODO: Use a framework list instead of building all of them?

  # 1. Create XCFrameworks for every framework that was generated by the main
  # framework build process
  FRAMEWORK_RELATIVE_PATH="Products/Library/Frameworks/$CURRENT_FRAMEWORK_NAME.framework"

  _xcodebuild \
    -create-xcframework \
    -framework "$IOS_DEVICE_ARCHIVE_PATH/$FRAMEWORK_RELATIVE_PATH" \
    -framework "$IOS_SIMULATOR_ARCHIVE_PATH/$FRAMEWORK_RELATIVE_PATH" \
    -output "$XCFRAMEWORKS_DIR/$CURRENT_FRAMEWORK_NAME.xcframework"
done
